class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int ans=0;
        for(int i=0;i<n-1;i++)
        {
            int current=prices[i];
            int j=i;
            while(prices[j+1]>prices[j])
            {
                if(j==n-2)
                {
                    j++;
                    break;
                }
                else
                {
                    j++;
                }
            }
            if(j!=i)
            {
                current=prices[j]-current;
                i=j;
                ans=current +ans;
            }
        }
        return ans;
    }
};
//better approach using peak and valley method 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        int i=0;
        int n=prices.size();
        int valley=prices[i];
        int peak=prices[i];
        while(i<n-1)
        {
            while(i<n-1 and prices[i]>=prices[i+1])
            {
                i++;
            }
            peak=prices[i];
            while(i<n-1 and prices[i]<=prices[i+1])
            {
                i++;
            }
            valley=prices[i];
            ans+=(valley-peak);
        }
        return ans;
    }
};
// best solution
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        int n=prices.size();
        for(int i=0;i<n-1;i++)
        {
            if(prices[i+1]>prices[i])
            {
                ans+=prices[i+1]-prices[i];
            }
        }
        return ans;
    }
};

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
    Node*left;
    Node*right;
    int val;
    int height;
    
    Node(int val){
        this->val = val;
        this->left= NULL;
        this->right = NULL;
        this->height = 1;
    }
};



void inorder(Node*root){
    if(!root){
        return ;
    }
    inorder(root->left);
    cout<<root->val<<"->";
    inorder(root->right);
    return ;
}


bool search(Node*root, int target){
    if(!root){
        return false;
    }
    if(root->val > target){
        return search(root->right, target);
    } else if( root->val < target){
        return search(root->left, target);
    }
    return true;
}

int height(Node*root){
    if(root==NULL) return 0;

    return root->height;
}

Node*left_rotate(Node*&root){
    Node*right = root->right;
    Node* left = right->left;

    right->left = root;
    root->right = left;

    root->height = max(height(root->left), height(root->right))+1 ;
    right->height = max(height(right->left), height(right->right)) +1;

    return right;
}

Node*right_rotation(Node*&root){
    Node*left = root->left;
    Node*right = left->right;

    left->right = root;
    root->left = right;

    root->height = max(height(root->left), height(root->right))+1 ;
    left->height = max(height(left->left), height(left->right)) +1;
    return left;
}

Node*insert_in_bst(Node* &root, int val){
    if(!root){
        Node*newNode = new Node(val);
        return newNode;
    }
    else if(root->val > val){
        root->left = insert(root->left, val);
    }
    else {
        root->right =  insert(root->right, val);
    }
    return root;
}

int balance_from_right_to_left(Node*root){
    if(root==NULL) return 0;

    return height(root->right) - height(root->left);
}

Node*inserting_in_avl_tree(Node*&root, int val){
    if(!root){
        Node*newNode = new Node(val);
    return newNode;
    }

    if(root->val > val){
        root->left = inserting_in_avl_tree(root->left, val);
    }
    else if(root->val < val){
        root->right = inserting_in_avl_tree(root->right, val);
    }
    else return root;

    root->height = max(height(root->left), height(root->right))+1;
    int balance = balance_from_right_to_left(root);


    //left left
    if(balance <-1 && val < root->left->val){
        return right_rotation(root);
    }

    //left right
    if(balance <-1 && val > root->right->val){
        root->left= left_rotate(root->left);
        return right_rotation(root);
    }

    //right right
    if(balance >1 && val > root->right->val){
        return left_rotate(root);
    }

    //right left
    if(balance >1 && val > root->right->val){
        root->right = right_rotation(root->right);
        return left_rotate(root);
    }
    return root;
}

void BFS(Node*root){
    if(!root){
        return ;
    }
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* curr = q.front();
        if(curr == NULL){
            cout<<endl;
            q.pop();
            if(!q.empty()){
                q.push(NULL);
                continue;
            } else {
                break;
            }
        }
        cout<<curr->val<<"->"<<curr->height<<" ";

        if(curr->left){
            q.push(curr->left);
        }
        if(curr->right){
            q.push(curr->right);
        }
        q.pop();
    }
    return;
}


int main()
{
    int size;
    cin>>size;
    vector<int> arr(size);
    // Node*root= new Node(3);
    // root->left = new Node(4);
    // root->right = new Node(6);
    Node*root =NULL;
    for(int i =0;i<size;i++){
        cin>>arr[i];
        root = inserting_in_avl_tree(root, arr[i]);
        BFS(root);
        cout<<endl<<endl;
    }
    BFS(root);
    

    return 0;
}
